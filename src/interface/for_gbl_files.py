import streamlit as st
import base64
import os

st.set_page_config(layout="wide", page_title="3D Viewer")

st.title("üß¨ 3D Viewer —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π")

GLB_PATH = r"C:\projects\python\PavFGS\src\interface\creepy_scarecrow__horror_stylized.glb"

if not os.path.exists(GLB_PATH):
    st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {GLB_PATH}")
    st.stop()

with open(GLB_PATH, "rb") as f:
    glb_data = f.read()
    glb_base64 = base64.b64encode(glb_data).decode("utf-8")

html_code = f"""
<!DOCTYPE html>
<html>
<head>
    <style>
        body {{ margin: 0; padding: 0; overflow: hidden; }}
        #container {{ width: 100%; height: 600px; background: #1e1e1e; position: relative; }}
        #loading {{ color: white; text-align: center; padding: 20px; font-family: Arial; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }}
        #controls {{ position: absolute; bottom: 10px; left: 10px; background: rgba(0,0,0,0.7); padding: 10px; border-radius: 5px; color: white; }}
    </style>
</head>
<body>
    <div id="container">
        <div id="loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ 3D –º–æ–¥–µ–ª–∏...</div>
        <div id="controls" style="display: none;">
            <button onclick="resetCamera()">üîÑ –°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã</button>
            <button onclick="toggleRotation()">‚è∏Ô∏è –í—Ä–∞—â–µ–Ω–∏–µ</button>
        </div>
    </div>

    <!-- –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π Three.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <script>
        // –ü—Ä–æ—Å—Ç–æ–π OrbitControls —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é
        class SimpleOrbitControls {{
            constructor(object, domElement) {{
                this.object = object;
                this.domElement = domElement;
                
                this.enabled = true;
                this.target = new THREE.Vector3();
                this.minDistance = 0;
                this.maxDistance = Infinity;
                
                // State
                this.spherical = new THREE.Spherical();
                this.sphericalDelta = new THREE.Spherical();
                
                this.scale = 1;
                this.panOffset = new THREE.Vector3();
                
                this.mouseButtons = {{ LEFT: 0, MIDDLE: 1, RIGHT: 2 }};
                
                // Event listeners
                this.onMouseDown = this.onMouseDown.bind(this);
                this.onMouseWheel = this.onMouseWheel.bind(this);
                this.onContextMenu = this.onContextMenu.bind(this);
                
                this.connect();
                this.update();
            }}
            
            connect() {{
                this.domElement.addEventListener('mousedown', this.onMouseDown);
                this.domElement.addEventListener('wheel', this.onMouseWheel);
                this.domElement.addEventListener('contextmenu', this.onContextMenu);
            }}
            
            onMouseDown(event) {{
                if (!this.enabled) return;
                
                event.preventDefault();
                
                const mouseAction = event.button === this.mouseButtons.LEFT ? 'rotate' :
                                  event.button === this.mouseButtons.RIGHT ? 'pan' : 'zoom';
                
                const onMouseMove = (moveEvent) => {{
                    const movementX = moveEvent.clientX - event.clientX;
                    const movementY = moveEvent.clientY - event.clientY;
                    
                    if (mouseAction === 'rotate') {{
                        this.sphericalDelta.theta -= movementX * 0.01;
                        this.sphericalDelta.phi -= movementY * 0.01;
                    }} else if (mouseAction === 'pan') {{
                        // Simple pan implementation
                        this.panOffset.x -= movementX * 0.01;
                        this.panOffset.y += movementY * 0.01;
                    }}
                    
                    this.update();
                }};
                
                const onMouseUp = () => {{
                    document.removeEventListener('mousemove', onMouseMove);
                    document.removeEventListener('mouseup', onMouseUp);
                }};
                
                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup', onMouseUp);
            }}
            
            onMouseWheel(event) {{
                if (!this.enabled) return;
                
                event.preventDefault();
                this.scale *= Math.pow(0.95, event.deltaY > 0 ? 1 : -1);
                this.update();
            }}
            
            onContextMenu(event) {{
                event.preventDefault();
            }}
            
            update() {{
                const offset = new THREE.Vector3();
                const rotation = new THREE.Quaternion();
                const scale = new THREE.Vector3();
                
                this.spherical.theta += this.sphericalDelta.theta;
                this.spherical.phi += this.sphericalDelta.phi;
                this.spherical.phi = Math.max(0.1, Math.min(Math.PI - 0.1, this.spherical.phi));
                
                offset.setFromSpherical(this.spherical);
                offset.multiplyScalar(this.scale);
                offset.add(this.panOffset);
                
                this.object.position.copy(offset).add(this.target);
                this.object.lookAt(this.target);
                
                this.sphericalDelta.set(0, 0, 0);
                this.panOffset.set(0, 0, 0);
            }}
        }}

        function initThreeJS() {{
            const container = document.getElementById('container');
            const loading = document.getElementById('loading');
            const controlsDiv = document.getElementById('controls');
            
            try {{
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã
                const scene = new THREE.Scene();
                scene.background = new THREE.Color(0x1e1e1e);

                const camera = new THREE.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 0.1, 1000);
                camera.position.set(0, 2, 5);

                const renderer = new THREE.WebGLRenderer({{ antialias: true }});
                renderer.setSize(container.clientWidth, container.clientHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                
                // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–Ω–¥–µ—Ä–µ—Ä
                container.innerHTML = '';
                container.appendChild(renderer.domElement);
                controlsDiv.style.display = 'block';

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ—Å—Ç–æ–π OrbitControls
                const controls = new SimpleOrbitControls(camera, renderer.domElement);

                // –û—Å–≤–µ—â–µ–Ω–∏–µ
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
                scene.add(ambientLight);
                
                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
                directionalLight.position.set(5, 10, 7);
                scene.add(directionalLight);

                // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
                let mixer = null;
                let clock = new THREE.Clock();
                let autoRotate = true;

                // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FileLoader + GLTFLoader
                const loader = new THREE.FileLoader();
                loader.setResponseType('arraybuffer');
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ binary
                const binaryString = atob("{glb_base64}");
                const bytes = new Uint8Array(binaryString.length);
                for (let i = 0; i < binaryString.length; i++) {{
                    bytes[i] = binaryString.charCodeAt(i);
                }}

                // –°–æ–∑–¥–∞–µ–º GLTFLoader –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                const gltfLoader = new THREE.GLTFLoader();
                
                gltfLoader.parse(bytes.buffer, '', function(gltf) {{
                    console.log('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
                    
                    const model = gltf.scene;
                    scene.add(model);

                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    if (gltf.animations && gltf.animations.length > 0) {{
                        mixer = new THREE.AnimationMixer(model);
                        
                        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                        gltf.animations.forEach((clip) => {{
                            const action = mixer.clipAction(clip);
                            action.play();
                            console.log('–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–Ω–∏–º–∞—Ü–∏—è:', clip.name);
                        }});
                        
                        console.log('–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–∞—Ü–∏–π:', gltf.animations.length);
                    }} else {{
                        console.log('–ê–Ω–∏–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –º–æ–¥–µ–ª–∏');
                    }}

                    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É
                    const box = new THREE.Box3().setFromObject(model);
                    const center = box.getCenter(new THREE.Vector3());
                    const size = box.getSize(new THREE.Vector3());
                    
                    controls.target.copy(center);
                    controls.spherical.radius = size.length() * 2;
                    controls.update();

                }}, undefined, function(error) {{
                    loading.textContent = '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: ' + error;
                    console.error('Error loading model:', error);
                }});

                // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                window.resetCamera = function() {{
                    controls.target.set(0, 0, 0);
                    controls.spherical.radius = 5;
                    controls.spherical.theta = 0;
                    controls.spherical.phi = Math.PI / 2;
                    controls.update();
                }};
                
                window.toggleRotation = function() {{
                    autoRotate = !autoRotate;
                }};

                // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
                function animate() {{
                    requestAnimationFrame(animate);
                    
                    const delta = clock.getDelta();
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
                    if (mixer) {{
                        mixer.update(delta);
                    }}
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
                    if (autoRotate) {{
                        controls.spherical.theta += delta * 0.5;
                        controls.update();
                    }}
                    
                    renderer.render(scene, camera);
                }}
                animate();

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
                window.addEventListener('resize', function() {{
                    camera.aspect = container.clientWidth / container.clientHeight;
                    camera.updateProjectionMatrix();
                    renderer.setSize(container.clientWidth, container.clientHeight);
                }});

            }} catch (error) {{
                loading.textContent = '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message;
                console.error('Initialization error:', error);
            }}
        }}

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if (document.readyState === 'loading') {{
            document.addEventListener('DOMContentLoaded', initThreeJS);
        }} else {{
            initThreeJS();
        }}
    </script>
</body>
</html>
"""

st.components.v1.html(html_code, height=620)

st.markdown("""
**üéØ –≠—Ç–æ—Ç –∫–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Ç–æ–º—É —á—Ç–æ:**
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π Three.js –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- OrbitControls —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤—Ä—É—á–Ω—É—é –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ
- GLTFLoader –≤—Å—Ç—Ä–æ–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É Three.js
- –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
- üñ±Ô∏è **–õ–ö–ú + –¥–≤–∏–∂–µ–Ω–∏–µ** - –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
- üñ±Ô∏è **–ü–ö–ú + –¥–≤–∏–∂–µ–Ω–∏–µ** - –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ  
- üîç **–ö–æ–ª–µ—Å–∏–∫–æ** - –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ/–æ—Ç–¥–∞–ª–µ–Ω–∏–µ
- üîÑ **–ö–Ω–æ–ø–∫–∞ "–°–±—Ä–æ—Å –∫–∞–º–µ—Ä—ã"** - –≤–µ—Ä–Ω—É—Ç—å –≤–∏–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
- ‚è∏Ô∏è **–ö–Ω–æ–ø–∫–∞ "–í—Ä–∞—â–µ–Ω–∏–µ"** - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–≤—Ä–∞—â–µ–Ω–∏–µ

–¢–µ–ø–µ—Ä—å –∞–Ω–∏–º–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å! üé¨
""")

st.subheader("–ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–µ—Å–ª–∏ –≤—ã—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)")

simple_html = f"""
<iframe style="width:100%; height:600px; border:none;" 
        src="https://gltf-viewer.donmccurdy.com/">
</iframe>
"""

st.components.v1.html(simple_html, height=620)
st.info("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–µ—Å—è –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫–∞")